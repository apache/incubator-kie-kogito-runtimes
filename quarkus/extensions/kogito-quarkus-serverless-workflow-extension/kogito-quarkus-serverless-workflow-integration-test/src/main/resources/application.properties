quarkus.kogito.logger.always-include=true
quarkus.swagger-ui.always-include=true

kogito.persistence.type=jdbc
kogito.persistence.proto.marshaller=false
quarkus.datasource.db-kind=postgresql
quarkus.flyway.migrate-at-start=true
quarkus.flyway.clean-at-start=true

quarkus.http.test-port=0
quarkus.log.level=INFO
#quarkus.log.category."org.kie.kogito".level=DEBUG

# To include the greethidden workflow
kogito.codegen.ignoreHiddenFiles=false

quarkus.kafka.devservices.enabled=false
quarkus.kubernetes-client.devservices.enabled=false

# OpenApi client properties, see OperationsMockService, which is mocking these two services
quarkus.rest-client.multiplication.url=${multiplication-service-mock.url}
quarkus.rest-client.subtraction.url=${subtraction-service-mock.url}

# OpenApi client properties to access the general purpose external-service, which is mocked by the ExternalServiceMock
quarkus.rest-client.external_service_yaml.url=${external-service-mock.url}

# OpenApi client properties to access the echo service, which is mocked by the EnumEchoServiceMock
quarkus.rest-client.enum-parameter_yaml.url=${enum-echo-service-mock.url}

# Error handling properties
kogito.sw.functions.publishPerfectSquare.host=localhost

mp.messaging.incoming.move.connector=quarkus-http
mp.messaging.incoming.move.path=/move

mp.messaging.incoming.quiet.connector=quarkus-http
mp.messaging.incoming.quiet.path=/quiet
kogito.addon.messaging.unmarshaller.quiet=java

mp.messaging.incoming.never.connector=quarkus-http
mp.messaging.incoming.never.path=/never

mp.messaging.incoming.eventTimeout1.connector=quarkus-http
mp.messaging.incoming.eventTimeout1.path=/eventTimeout1

mp.messaging.incoming.eventTimeout2.connector=quarkus-http
mp.messaging.incoming.eventTimeout2.path=/eventTimeout2

mp.messaging.incoming.eventTimeout3.connector=quarkus-http
mp.messaging.incoming.eventTimeout3.path=/eventTimeout3

mp.messaging.incoming.eventTimeout1Exclusive.connector=quarkus-http
mp.messaging.incoming.eventTimeout1Exclusive.path=/eventTimeout1Exclusive

mp.messaging.incoming.eventTimeout2Exclusive.connector=quarkus-http
mp.messaging.incoming.eventTimeout2Exclusive.path=/eventTimeout2Exclusive

mp.messaging.incoming.eventTimeout3Exclusive.connector=quarkus-http
mp.messaging.incoming.eventTimeout3Exclusive.path=/eventTimeout3Exclusive

mp.messaging.incoming.event1Exclusive.connector=quarkus-http
mp.messaging.incoming.event1Exclusive.path=/event1Exclusive

mp.messaging.incoming.event2Exclusive.connector=quarkus-http
mp.messaging.incoming.event2Exclusive.path=/event2Exclusive

mp.messaging.incoming.event3Exclusive.connector=quarkus-http
mp.messaging.incoming.event3Exclusive.path=/event3Exclusive

my_name=javierito

# Kafka configuration for the sw tests that produce events
mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
mp.messaging.outgoing.kogito_outgoing_stream.topic=kogito-sw-out-events
mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# kafka configurations for the CallbackStateIT test.
mp.messaging.incoming.callback_state_event_type.connector=smallrye-kafka
mp.messaging.incoming.callback_state_event_type.topic=callback_state_event_type
mp.messaging.incoming.callback_state_event_type.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.callback_state_event_type.group.id=kogito-sw-it
mp.messaging.incoming.callback_state_event_type.auto.offset.reset=earliest

# kafka configurations for the CallbackStateTimeoutsIT test.
mp.messaging.incoming.callback_state_timeouts_event_type.connector=smallrye-kafka
mp.messaging.incoming.callback_state_timeouts_event_type.topic=callback_state_timeouts_event_type
mp.messaging.incoming.callback_state_timeouts_event_type.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.callback_state_timeouts_event_type.group.id=kogito-sw-it
mp.messaging.incoming.callback_state_timeouts_event_type.auto.offset.reset=earliest

# kafka configurations for the SwitchStateIT test variants:

# kafka configurations for the switch_state_event_condition_timeouts_transition SW:
mp.messaging.incoming.visa_approved_in_transition.connector=smallrye-kafka
mp.messaging.incoming.visa_approved_in_transition.topic=visa_approved_topic_transition
mp.messaging.incoming.visa_approved_in_transition.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.visa_denied_in_transition.connector=smallrye-kafka
mp.messaging.incoming.visa_denied_in_transition.topic=visa_denied_topic_transition
mp.messaging.incoming.visa_denied_in_transition.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# kafka configurations for the switch_state_event_condition_timeouts_transition2 SW:
mp.messaging.incoming.visa_approved_in_transition2.connector=smallrye-kafka
mp.messaging.incoming.visa_approved_in_transition2.topic=visa_approved_topic_transition2
mp.messaging.incoming.visa_approved_in_transition2.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.visa_denied_in_transition2.connector=smallrye-kafka
mp.messaging.incoming.visa_denied_in_transition2.topic=visa_denied_topic_transition2
mp.messaging.incoming.visa_denied_in_transition2.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# kafka configurations for the switch-state-event-condition-timeouts-end SW:
mp.messaging.incoming.visa_approved_in_condition_end.connector=smallrye-kafka
mp.messaging.incoming.visa_approved_in_condition_end.topic=visa_approved_topic_condition_end
mp.messaging.incoming.visa_approved_in_condition_end.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.visa_denied_in_condition_end.connector=smallrye-kafka
mp.messaging.incoming.visa_denied_in_condition_end.topic=visa_denied_topic_condition_end
mp.messaging.incoming.visa_denied_in_condition_end.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# End of kafka configurations for the SwitchStateIT test variants

# kafka configurations for the CorrelationIT test.
mp.messaging.incoming.correlation_start_event_type.connector=smallrye-kafka
mp.messaging.incoming.correlation_start_event_type.topic=correlation_start_event_type
mp.messaging.incoming.correlation_start_event_type.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.correlation_start_event_type.group.id=kogito-sw-it
mp.messaging.incoming.correlation_start_event_type.auto.offset.reset=earliest

mp.messaging.incoming.correlation_event_type.connector=smallrye-kafka
mp.messaging.incoming.correlation_event_type.topic=correlation_event_type
mp.messaging.incoming.correlation_event_type.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.correlation_event_type.group.id=kogito-sw-it
mp.messaging.incoming.correlation_event_type.auto.offset.reset=earliest

mp.messaging.incoming.kogito_incoming_stream.connector=quarkus-http
mp.messaging.incoming.kogito_incoming_stream.path=/


quarkus.grpc.clients.Greeter.host=localhost

# Token propagation support test properties, relates to the TokenPropagationIT and the token-propagation.sw.json
# 1) Configure the desired packages for the code generation, this information is basically source
quarkus.openapi-generator.codegen.spec.token_propagation_external_service1_yaml.base-package=org.acme.externalservice1
quarkus.openapi-generator.codegen.spec.token_propagation_external_service2_yaml.base-package=org.acme.externalservice2
quarkus.openapi-generator.codegen.spec.token_propagation_external_service3_yaml.base-package=org.acme.externalservice3
quarkus.openapi-generator.codegen.spec.token_propagation_external_service4_yaml.base-package=org.acme.externalservice4
quarkus.openapi-generator.codegen.spec.token_propagation_external_service5_yaml.base-package=org.acme.externalservice5
# 2) Configure the access url for the four services.
quarkus.rest-client.token_propagation_external_service1_yaml.url=${propagation-external-service-mock.url}
quarkus.rest-client.token_propagation_external_service2_yaml.url=${propagation-external-service-mock.url}
quarkus.rest-client.token_propagation_external_service3_yaml.url=${propagation-external-service-mock.url}
quarkus.rest-client.token_propagation_external_service4_yaml.url=${propagation-external-service-mock.url}
quarkus.rest-client.token_propagation_external_service5_yaml.url=${propagation-external-service-mock.url}

# 3) Configure the different propagation alternatives.
# default propagation for token_propagation_external_service1 invocation
quarkus.openapi-generator.token_propagation_external_service1_yaml.auth.service1_http_bearer.token-propagation=true
# default propagation for token_propagation_external_service2 invocation
quarkus.openapi-generator.token_propagation_external_service2_yaml.auth.service2_oauth2.token-propagation=true
# propagate the token coming in the header SERVICE3_HEADER_TO_PROPAGATE for token_propagation_external_service3 invocation
quarkus.openapi-generator.token_propagation_external_service3_yaml.auth.service3_http_bearer.token-propagation=true
quarkus.openapi-generator.token_propagation_external_service3_yaml.auth.service3_http_bearer.header-name=SERVICE3_HEADER_TO_PROPAGATE
# propagate the token coming in the header SERVICE4_HEADER_TO_PROPAGATE for token_propagation_external_service4 invocation
quarkus.openapi-generator.token_propagation_external_service4_yaml.auth.service4_oauth2.token-propagation=true
quarkus.openapi-generator.token_propagation_external_service4_yaml.auth.service4_oauth2.header-name=SERVICE4_HEADER_TO_PROPAGATE

# 4) Oidc clients for the services that has oauth2 security.
# Oidc client used by the token_propagation_external_service2
quarkus.oidc-client.service2_oauth2.auth-server-url=${keycloak.mock.service.url}
quarkus.oidc-client.service2_oauth2.token-path=${keycloak.mock.service.token-path}
quarkus.oidc-client.service2_oauth2.discovery-enabled=false
quarkus.oidc-client.service2_oauth2.client-id=kogito-app
quarkus.oidc-client.service2_oauth2.grant.type=client
quarkus.oidc-client.service2_oauth2.credentials.client-secret.method=basic
quarkus.oidc-client.service2_oauth2.credentials.client-secret.value=secret

# Oidc client used by the token_propagation_external_service4
quarkus.oidc-client.service4_oauth2.auth-server-url=${keycloak.mock.service.url}
quarkus.oidc-client.service4_oauth2.token-path=${keycloak.mock.service.token-path}
quarkus.oidc-client.service4_oauth2.discovery-enabled=false
quarkus.oidc-client.service4_oauth2.client-id=kogito-app
quarkus.oidc-client.service4_oauth2.grant.type=client
quarkus.oidc-client.service4_oauth2.credentials.client-secret.method=basic
quarkus.oidc-client.service4_oauth2.credentials.client-secret.value=secret

# Oidc client used by the token_propagation_external_service5
quarkus.oidc-client.service5_oauth2.auth-server-url=${keycloak.mock.service.url}
quarkus.oidc-client.service5_oauth2.token-path=${keycloak.mock.service.token-path}
quarkus.oidc-client.service5_oauth2.discovery-enabled=false
quarkus.oidc-client.service5_oauth2.client-id=kogito-app
quarkus.oidc-client.service5_oauth2.grant.type=client
quarkus.oidc-client.service5_oauth2.credentials.client-secret.method=basic
quarkus.oidc-client.service5_oauth2.credentials.client-secret.value=secret

mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.kogito-processinstances-events.group.id=kogito-data-index-it
mp.messaging.outgoing.kogito-processinstances-events.auto.offset.reset=latest

mp.messaging.outgoing.kogito-usertaskinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-usertaskinstances-events.topic=kogito-usertaskinstances-events
mp.messaging.outgoing.kogito-usertaskinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.kogito-usertaskinstances-events.group.id=kogito-data-index-it
mp.messaging.outgoing.kogito-usertaskinstances-events.auto.offset.reset=latest

mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-variables-events.topic=kogito-variables-events
mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.kogito-variables-events.group.id=kogito-data-index-it
mp.messaging.outgoing.kogito-variables-events.auto.offset.reset=latest

quarkus.native.additional-build-args=-H:SerializationConfigurationResources=serialization-config.json
# Maximum Java heap to be used during the native image generation
quarkus.native.native-image-xmx=8g

quarkus.http.auth.basic=true
quarkus.http.auth.permission.default.paths=/secure/*
quarkus.http.auth.permission.default.policy=authenticated

quarkus.security.users.embedded.enabled=true
quarkus.security.users.embedded.plain-text=true
quarkus.security.users.embedded.users.buddy=buddy