@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    triggers {
        cron ('H 9 * * *')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 120, unit: 'MINUTES')
    }
    stages {
        stage('Build kogito-runtimes') {
            steps {
                script {
                    maven.runMavenWithSubmarineSettings('clean install', false)
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-apps') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-apps.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-apps']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-apps.git']]])
                dir("kogito-apps") {
                    script {
                      maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-examples.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-examples']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-examples.git']]])
                dir("kogito-examples") {
                    script {
                         maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples with persistence') {
            steps {
                // Use a separate dir for persistence to not overwrite the test results
                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-examples.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-examples-persistence']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-examples.git']]])
                dir("kogito-examples-persistence") {
                    script {
                        // Don't run with tests so far, see: https://github.com/quarkusio/quarkus/issues/6885
                        maven.runMavenWithSubmarineSettings('clean install -Ppersistence', true)
                    }
                }
            }
            post {
                always {
                    saveReports(true)
                }
            }
        }
        stage('Deploy kogito-runtimes') {
            steps {
                script {
                    maven.runMavenWithSubmarineSettings('clean deploy', true)
                }
            }
        }
        stage('Deploy kogito-apps') {
            steps {
                dir("kogito-apps") {
                    script {
                      maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
            }
        }
        stage('Deploy kogito-examples') {
            steps {
                dir("kogito-examples") {
                    script {
                      maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
            }
        }
    }
    post {
        failure {
            emailext body: 'Kogito daily snapshot deploy #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} ',
                     subject: 'Kogito daily snapshot deploy #${BRANCH_NAME}',
                     to: env.KOGITO_CI_EMAIL_TO
        }
        unstable {
            emailext body: 'Kogito daily snapshot deploy #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                     'Please look here: ${BUILD_URL} ',
                     subject: 'Kogito daily snapshot deploy #${BRANCH_NAME}',
                     to: env.KOGITO_CI_EMAIL_TO
        }
        always {
            cleanWs()
        }
    }
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}