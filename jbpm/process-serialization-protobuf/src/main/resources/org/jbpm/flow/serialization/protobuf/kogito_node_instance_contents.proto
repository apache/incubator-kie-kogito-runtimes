/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

syntax = "proto3";

package org.jbpm.flow.serialization.protobuf;

import "org/jbpm/flow/serialization/protobuf/kogito_types.proto";
import "google/protobuf/any.proto";

option java_outer_classname = "KogitoNodeInstanceContentsProtobuf";

message RuleSetNodeInstanceContent {
    repeated string timer_instance_id = 1;
    optional string rule_flow_group = 2;
    map<string, string> timer_instance_reference = 3;
}

message WorkItemNodeInstanceContent {
    string work_item_id = 1;
    repeated string timer_instance_id = 2;
    optional string error_handling_process_instance_id = 3;

    // work item data
    int32 state = 4;
    repeated Variable variable = 5;
    repeated Variable result = 6;
    optional string phase_id = 7;
    optional string phase_status = 8;
    optional string name = 9;
    optional int64 start_date = 10;
    optional int64 complete_date = 11;
    optional google.protobuf.Any work_item_data = 12;
    map<string, string> timer_instance_reference = 13;
    optional string actual_owner = 14;
    optional string external_reference_id = 15;
}

message LambdaSubProcessNodeInstanceContent {
    optional string process_instance_id = 1;
    repeated string timer_instance_id = 2;
    map<string, string> timer_instance_reference = 3;
}

message SubProcessNodeInstanceContent {
    optional string process_instance_id = 1;
    repeated string timer_instance_id = 2;
    map<string, string> timer_instance_reference = 3;
}

message MilestoneNodeInstanceContent {
    repeated string timer_instance_id = 1;
    map<string, string> timer_instance_reference = 2;
}

message EventNodeInstanceContent {
}

message TimerNodeInstanceContent {
   optional string timer_id = 1;
}

message JoinNodeInstanceContent {
    repeated JoinTrigger trigger = 1;
    message JoinTrigger {
        optional string node_id = 1;
        optional int32 counter = 2;
    }
}

message StateNodeInstanceContent {
    repeated string timer_instance_id = 1;
    map<string, string> timer_instance_reference = 2;
}

message CompositeContextNodeInstanceContent {
    repeated string timer_instance_id = 1;
    WorkflowContext context = 2;
    map<string, string> timer_instance_reference = 3;
}

message DynamicNodeInstanceContent {
    repeated string timer_instance_id = 1;
    WorkflowContext context = 2;
    map<string, string> timer_instance_reference = 3;
}

message EventSubProcessNodeInstanceContent {
    repeated string timer_instance_id = 1;
    WorkflowContext context = 2;
    map<string, string> timer_instance_reference = 3;
}

message ForEachNodeInstanceContent {
    repeated string timer_instance_id = 1;
    WorkflowContext context = 2;
    int32 totalInstances = 3;
    int32 executedInstances = 4;
    bool hasAsyncInstances = 5;
    map<string, string> timer_instance_reference = 6;
}

message AsyncEventNodeInstanceContent {
    string job_id = 1;
}