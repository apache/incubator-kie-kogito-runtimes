<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.kie.kogito</groupId>
    <artifactId>kogito-cloud</artifactId>
    <version>8.0.0-SNAPSHOT</version>
  </parent>
  <artifactId>kogito-cloud-tests</artifactId>
  <name>Kogito Cloud Integration</name>
  <description>Kogito Cloud Integration Tests</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- Skip tests by default. -->
    <skipITs>true</skipITs>

    <!-- used by test services -->
    <cxf.version>3.2.6</cxf.version>
    <springboot.version>2.1.8.RELEASE</springboot.version>

  </properties>

  <dependencies>
    <dependency>
      <groupId>org.kie.kogito</groupId>
      <artifactId>kogito-cloud-workitems</artifactId>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- XTF dependencies. -->
    <dependency>
      <groupId>cz.xtf</groupId>
      <artifactId>core</artifactId>
    </dependency>
    <dependency>
      <groupId>cz.xtf</groupId>
      <artifactId>builder</artifactId>
    </dependency>

    <!-- Logging -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Fabric8 client used exclusively for tests purposes only -->
    <dependency>
      <groupId>io.fabric8</groupId>
      <artifactId>kubernetes-server-mock</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>bintray-xtf-cz-xtf</id>
      <name>Bintray XTF</name>
      <url>https://dl.bintray.com/xtf-cz/xtf</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
    <repository>
      <id>oss-jfrog-snapshots</id>
      <name>oss-jfrog-artifactory-snapshots</name>
      <url>https://oss.jfrog.org/artifactory/oss-snapshot-local</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <releases>
        <enabled>false</enabled>
      </releases>
    </repository>
  </repositories>

  <profiles>
    <profile>
      <id>openshift</id>
      <properties>
        <skipITs>false</skipITs>
      </properties>
    </profile>
  </profiles>

  <build>
    <pluginManagement>
      <plugins>
        <!-- XTF use tmp folder as temp folder, need to be deleted too when 
          rerunning tests. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <configuration>
            <filesets>
              <fileset>
                <directory>${project.basedir}/tmp</directory>
              </fileset>
            </filesets>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <executions>
            <execution>
              <!-- Copy source code from libraries to be tested into the 
                test service. we need to run the code in a container and code is deployed 
                via S2I. Also in the specified project, libraries' dependencies are directly 
                mentioned into the native profile in order for the whole to be correctly 
                compiled -->
              <id>quarkus-copy-deps-libs-classes</id>
              <phase>generate-resources</phase>
              <goals>
                <goal>testResources</goal>
              </goals>
              <configuration>
                <outputDirectory>${project.build.directory}/test-classes/services/httpcalls-cloud-workitems-quarkus-service/src/main/java</outputDirectory>
                <overwrite>true</overwrite>
                <resources>
                  <resource>
                    <directory>${project.basedir}/../kogito-cloud-services/kogito-cloud-kubernetes-client/src/main/java</directory>
                  </resource>
                  <resource>
                    <directory>${project.basedir}/../kogito-cloud-services/kogito-cloud-workitems/src/main/java</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
            <execution>
              <!-- Copy source code from libraries to be tested into the 
                test service. we need to run the code in a container and code is deployed 
                via S2I. Also in the specified project, libraries' dependencies are directly 
                mentioned into the native profile in order for the whole to be correctly 
                compiled -->
              <id>springboot-copy-deps-libs-classes</id>
              <phase>generate-resources</phase>
              <goals>
                <goal>testResources</goal>
              </goals>
              <configuration>
                <outputDirectory>${project.build.directory}/test-classes/services/httpcalls-cloud-workitems-springboot-service/src/main/java</outputDirectory>
                <overwrite>true</overwrite>
                <resources>
                  <resource>
                    <directory>${project.basedir}/../kogito-cloud-services/kogito-cloud-kubernetes-client/src/main/java</directory>
                  </resource>
                  <resource>
                    <directory>${project.basedir}/../kogito-cloud-services/kogito-cloud-workitems/src/main/java</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
            <execution>
              <id>copy-test-resources</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>testResources</goal>
              </goals>
              <configuration>
                <resources>
                  <testResource>
                    <directory>src/test/resources</directory>
                    <excludes>
                      <exclude>**/target/</exclude>
                    </excludes>
                    <filtering>true</filtering>
                  </testResource>
                </resources>
                <escapeString>\</escapeString>
              </configuration>
            </execution>
            <execution>
              <id>quarkus-merge-common-test-resources</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>testResources</goal>
              </goals>
              <configuration>
                <overwrite>true</overwrite>
                <outputDirectory>${project.build.directory}/test-classes/services/httpcalls-cloud-workitems-quarkus-service/src/main/java</outputDirectory>
                <resources>
                  <resource>
                    <directory>${project.build.directory}/test-classes/services/httpcalls-cloud-workitems-common/src/main/java</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
            <execution>
              <id>springboot-merge-common-test-resources</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>testResources</goal>
              </goals>
              <configuration>
                <overwrite>true</overwrite>
                <outputDirectory>${project.build.directory}/test-classes/services/httpcalls-cloud-workitems-springboot-service/src/main/java</outputDirectory>
                <resources>
                  <resource>
                    <directory>${project.build.directory}/test-classes/services/httpcalls-cloud-workitems-common/src/main/java</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>


</project>
