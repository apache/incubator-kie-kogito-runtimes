@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    triggers {
        cron ('H 10 * * *')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 360, unit: 'MINUTES')
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: "master", description: 'Set the branch to build&test')
    }
    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')
        MAVEN_OPTS = '-Xms1024m -Xmx4g'

        // Set into 'Initialize' stage
        // DROOLS_VERSION
        // MAVEN_EXTRA_ARGS
    }
    stages {
        stage("Initialize"){
            steps {
                script {
                    dir('kogito-build-parent'){
                        // query mvn to get the latest version
                        env.DROOLS_VERSION = """${sh (
                                script: 'mvn versions:display-property-updates -DincludeProperties=version.org.kie7 -DallowSnapshots -N  | grep version.org.kie7 | awk \'{print $4}\' ',
                                returnStdout: true
                            ).trim()}"""
                        assert env.DROOLS_VERSION != ""
                        echo "Latest kie7 version is: ${env.DROOLS_VERSION}"

                        env.MAVEN_EXTRA_ARGS="-Dversion.org.kie7=${DROOLS_VERSION}"
                    }
                }
            }
        }
        stage('Build kogito-runtimes') {
            steps {
                script {
                    checkoutAndMavenCleanInstall("kogito-runtimes")
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-apps') {
            steps {
                script {
                    checkoutAndMavenCleanInstall("kogito-apps")
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                script {
                    checkoutAndMavenCleanInstall("kogito-examples")
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples with persistence') {
            steps {
                checkoutAndMavenCleanInstall("kogito-examples", "kogito-examples-persistence", "-Ppersistence")
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples with events') {
            steps {
                checkoutAndMavenCleanInstall("kogito-examples", "kogito-examples-events", "-Pevents")
            }
            post {
                always {
                    saveReports()
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        always {
            junit '**/target/surefire-reports/**/*.xml'
            cleanWs()
        }
    }
}

void sendNotification(){
    emailext body: "Kogito daily Drools #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}",
             subject: "[${params.BRANCH_NAME}][d] Runtimes Drools snapshot",
             to: env.KOGITO_CI_EMAIL_TO
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}

void checkoutAndMavenCleanInstall(String repoName, String dirName = "", String mavenExtraArgs = ""){
    if(dirName == ""){
        dirName = repoName
    }
    dir(dirName){
        checkout(githubscm.resolveRepository(repoName, "kiegroup", params.BRANCH_NAME, false))
        mavenCleanInstall(mavenExtraArgs)
    }
}

void mavenCleanInstall(String extraArgs){
    maven.runMavenWithSubmarineSettings("clean install ${env.MAVEN_EXTRA_ARGS} ${extraArgs}", false)
}
