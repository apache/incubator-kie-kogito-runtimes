@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

kogitoRuntimesRepo = 'kogito-runtimes'

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g && !built-in'
    }
    tools {
        maven 'kie-maven-3.8.1'
        jdk 'kie-jdk11'
    }
    options {
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
    }
    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    checkoutKogitoRuntimesRepo()
                }
            }
        }

        stage('Build kogito-runtimes') {
            steps {
                script {
                    getNativeMavenCommand('kogito-runtimes')
                        .withProperty('maven.test.failure.ignore', true)
                        // `-Dquarkus.bootstrap.effective-model-builder` is a temporary fix due to quarkus resolver on tests
                        // https://github.com/quarkusio/quarkus/issues/23205
                        .withProperty('quarkus.bootstrap.effective-model-builder', true)
                        .run('clean install')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        always {
            script {
                junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: true
                util.archiveConsoleLog()
            }
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void sendNotification() {
    mailer.sendMarkdownTestSummaryNotification("${NOTIFICATION_JOB_NAME}", "[${params.BUILD_BRANCH_NAME}] Kogito Runtimes", [env.KOGITO_CI_EMAIL_TO])
}

void checkoutKogitoRuntimesRepo() {
    dir(kogitoRuntimesRepo) {
        checkout(githubscm.resolveRepository(kogitoRuntimesRepo, params.GIT_AUTHOR, getKogitoTargetBranch(), false))
    }
}

String getKogitoTargetBranch() {
    return params.BUILD_BRANCH_NAME
}

MavenCommand getMavenCommand(String directory) {
    return new MavenCommand(this, ['-fae', '-ntp'])
                .withSettingsXmlId('kogito_release_settings')
                .withProperty('java.net.preferIPv4Stack', true)
                .inDirectory(directory)
}

MavenCommand getNativeMavenCommand(String directory, String builderImage = getNativeBuilderImage()) {
    def mvnCmd = getMavenCommand(directory)
                .withProfiles(['native'])
                .withProperty('quarkus.native.container-build', true)
                .withProperty('quarkus.native.container-runtime', 'docker')
                .withProperty('quarkus.profile', 'native') // Added due to https://github.com/quarkusio/quarkus/issues/13341

    if (builderImage) {
        mvnCmd.withProperty('quarkus.native.builder-image', builderImage)
    }

    return mvnCmd
}

void cleanContainers() {
    cloud.cleanContainersAndImages('docker')
}

String getNativeBuilderImage() {
    return params.NATIVE_BUILDER_IMAGE
}
