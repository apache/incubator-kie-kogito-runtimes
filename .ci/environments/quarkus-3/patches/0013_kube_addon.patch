diff --git a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/DeploymentUtilsTest.java b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/DeploymentUtilsTest.java
index fbce47a8d7..1048423a10 100644
--- a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/DeploymentUtilsTest.java
+++ b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/DeploymentUtilsTest.java
@@ -56,7 +56,7 @@ public class DeploymentUtilsTest {
     @Test
     public void testNotFoundDeployment() {
         Deployment deployment = mockServer.getClient().apps().deployments().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment.yaml")).item();
         deployment.getMetadata().setName("test");
         mockServer.getClient().resource(deployment).inNamespace(namespace).createOrReplace();
         assertEquals(Optional.empty(),
@@ -68,11 +68,11 @@ public class DeploymentUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("deployments.v1.apps/" + namespace + "/example-deployment-with-service");
 
         Deployment deployment = mockServer.getClient().apps().deployments().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment.yaml")).item();
         mockServer.getClient().resource(deployment).inNamespace(namespace).createOrReplace();
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-service.yaml")).item();
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = discovery.query(kubeURI).map(URI::toString);
@@ -84,14 +84,14 @@ public class DeploymentUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("deployments.v1.apps/" + namespace + "/custom-port-deployment?port-name=my-custom-port");
 
         Deployment deployment = mockServer.getClient().apps().deployments().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment.yaml")).item();
         deployment.getMetadata().setName("custom-port-deployment");
         deployment.getSpec().getTemplate().getSpec().getContainers().get(0).getPorts()
                 .add(new ContainerPortBuilder().withName("test-port").withContainerPort(4000).build());
         mockServer.getClient().resource(deployment).inNamespace(namespace).createOrReplace();
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-service.yaml")).item();
         service.getMetadata().setName("custom-port-name-service");
         service.getSpec().getPorts().add(new ServicePortBuilder()
                 .withName("my-custom-port")
@@ -108,16 +108,16 @@ public class DeploymentUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("deployments.v1.apps/" + namespace + "/example-deployment-no-service");
 
         Deployment deployment = mockServer.getClient().apps().deployments().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-no-service.yaml")).item();
         Deployment createdDeployment = mockServer.getClient().resource(deployment).inNamespace(namespace).createOrReplace();
 
         ReplicaSet rs = mockServer.getClient().apps().replicaSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/replica-set-deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/replica-set-deployment-no-service.yaml")).item();
         rs.getMetadata().getOwnerReferences().get(0).setUid(createdDeployment.getMetadata().getUid());
         ReplicaSet createdRs = mockServer.getClient().resource(rs).inNamespace(namespace).createOrReplace();
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/pod-deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/pod-deployment-no-service.yaml")).item();
         pod.getMetadata().setName("pod-deployment-no-service");
         pod.getMetadata().getOwnerReferences().get(0).setUid(createdRs.getMetadata().getUid());
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
@@ -131,19 +131,19 @@ public class DeploymentUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("deployments.v1.apps/" + namespace + "/example-deployment-no-service-2-replicas");
 
         Deployment deployment = mockServer.getClient().apps().deployments().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-no-service.yaml")).item();
         deployment.getMetadata().setName("example-deployment-no-service-2-replicas");
         deployment.getStatus().setReplicas(2);
         Deployment createdDeployment = mockServer.getClient().resource(deployment).inNamespace(namespace).createOrReplace();
 
         ReplicaSet rs = mockServer.getClient().apps().replicaSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/replica-set-deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/replica-set-deployment-no-service.yaml")).item();
         rs.getMetadata().setName("rs-2-replicas");
         rs.getMetadata().getOwnerReferences().get(0).setUid(createdDeployment.getMetadata().getUid());
         ReplicaSet createdRs = mockServer.getClient().resource(rs).inNamespace(namespace).createOrReplace();
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/pod-deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/pod-deployment-no-service.yaml")).item();
         pod.getMetadata().setName("pod-2-replicas");
         pod.getMetadata().getOwnerReferences().get(0).setUid(createdRs.getMetadata().getUid());
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
@@ -157,20 +157,20 @@ public class DeploymentUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("deployments.v1.apps/" + namespace + "/custom-port-deployment-1?port-name=my-custom-port");
 
         Deployment deployment = mockServer.getClient().apps().deployments().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/deployment-no-service.yaml")).item();
         deployment.getMetadata().setName("custom-port-deployment-1");
         deployment.getSpec().getTemplate().getSpec().getContainers().get(0).getPorts()
                 .add(new ContainerPortBuilder().withName("test-port").withContainerPort(4000).build());
         Deployment createdDeployment = mockServer.getClient().resource(deployment).inNamespace(namespace).createOrReplace();
 
         ReplicaSet rs = mockServer.getClient().apps().replicaSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/replica-set-deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/replica-set-deployment-no-service.yaml")).item();
         rs.getMetadata().setName("custom-port-rs");
         rs.getMetadata().getOwnerReferences().get(0).setUid(createdDeployment.getMetadata().getUid());
         ReplicaSet createdRs = mockServer.getClient().resource(rs).inNamespace(namespace).createOrReplace();
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/pod-deployment-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deployment/pod-deployment-no-service.yaml")).item();
         pod.getMetadata().getOwnerReferences().get(0).setUid(createdRs.getMetadata().getUid());
         pod.getSpec().getContainers().get(0).getPorts()
                 .add(new ContainerPortBuilder()
diff --git a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/IngressUtilsTest.java b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/IngressUtilsTest.java
index 1005e06c49..2d965ec974 100644
--- a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/IngressUtilsTest.java
+++ b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/IngressUtilsTest.java
@@ -50,7 +50,7 @@ public class IngressUtilsTest {
         Ingress ingress = mockServer.getClient()
                 .network().v1().ingresses()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("ingress/ingress-with-ip.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("ingress/ingress-with-ip.yaml")).item();
         mockServer.getClient().resource(ingress).inNamespace(namespace).createOrReplace();
 
         assertEquals(Optional.empty(),
@@ -62,7 +62,7 @@ public class IngressUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("ingresses.v1.networking.k8s.io/" + namespace + "/process-quarkus-ingress");
 
         Ingress ingress = mockServer.getClient().network().v1().ingresses().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("ingress/ingress-with-ip.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("ingress/ingress-with-ip.yaml")).item();
 
         mockServer.getClient().resource(ingress).inNamespace(namespace).createOrReplace();
 
@@ -75,7 +75,7 @@ public class IngressUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("ingresses.v1.networking.k8s.io/" + namespace + "/hello-app-ingress-tls");
 
         Ingress ingress = mockServer.getClient().network().v1().ingresses().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("ingress/ingress-with-tls-and-host.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("ingress/ingress-with-tls-and-host.yaml")).item();
 
         mockServer.getClient().resource(ingress).inNamespace(namespace).createOrReplace();
 
diff --git a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/KubernetesResourceDiscoveryTest.java b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/KubernetesResourceDiscoveryTest.java
index 39f8409005..5d1b2a7c49 100644
--- a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/KubernetesResourceDiscoveryTest.java
+++ b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/KubernetesResourceDiscoveryTest.java
@@ -51,7 +51,7 @@ public class KubernetesResourceDiscoveryTest {
         var kubeURI = KubernetesResourceUri.parse("services.v1/" + namespace + "/process-quarkus-example-pod-service");
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-node-port.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-node-port.yaml")).item();
 
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
@@ -64,7 +64,7 @@ public class KubernetesResourceDiscoveryTest {
         var kubeURI = KubernetesResourceUri.parse("services.v1/" + namespace + "/custom-port-name-service?port-name=my-custom-port");
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-node-port.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-node-port.yaml")).item();
         service.getMetadata().setName("custom-port-name-service");
         service.getSpec().getPorts().get(0).setName("my-custom-port");
         service.getSpec().getPorts().get(0).setPort(8089);
@@ -79,7 +79,7 @@ public class KubernetesResourceDiscoveryTest {
         var kubeURI = KubernetesResourceUri.parse("services.v1/" + namespace + "/process-quarkus-example-pod-clusterip-svc");
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).item();
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = kubernetesResourceDiscovery.query(kubeURI).map(URI::toString);
@@ -91,7 +91,7 @@ public class KubernetesResourceDiscoveryTest {
         var kubeURI = KubernetesResourceUri.parse("services.v1/" + namespace + "/process-quarkus-example-pod");
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-external-name.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-external-name.yaml")).item();
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = kubernetesResourceDiscovery.query(kubeURI).map(URI::toString);
@@ -101,7 +101,7 @@ public class KubernetesResourceDiscoveryTest {
     @Test
     public void testNotFoundService() {
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).item();
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
         assertEquals(Optional.empty(),
@@ -111,7 +111,7 @@ public class KubernetesResourceDiscoveryTest {
     @Test
     public void testNotSupportedTypeService() {
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).item();
         service.getSpec().setType(KubeConstants.LOAD_BALANCER_TYPE);
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
@@ -124,7 +124,7 @@ public class KubernetesResourceDiscoveryTest {
         var kubeURI = KubernetesResourceUri.parse("services.v1/process-quarkus-example-pod-service");
 
         Service service = mockServer.getClient().services().inNamespace("test")
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-node-port.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-node-port.yaml")).item();
         mockServer.getClient().resource(service).inNamespace("test").createOrReplace();
 
         Optional<String> url = kubernetesResourceDiscovery.query(kubeURI).map(URI::toString);
@@ -135,7 +135,7 @@ public class KubernetesResourceDiscoveryTest {
     public void testNotFoundKnativeService() {
         KnativeClient knativeClient = mockServer.getClient().adapt(KnativeClient.class);
         io.fabric8.knative.serving.v1.Service service = knativeClient.services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("knative/quarkus-greeting.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("knative/quarkus-greeting.yaml")).item();
         service.getMetadata().setName("test");
 
         // ItemWritableOperation#create is deprecated. However, we can't use the new method while Quarkus LTS is not greater than 2.16.
@@ -151,7 +151,7 @@ public class KubernetesResourceDiscoveryTest {
 
         KnativeClient knativeClient = mockServer.getClient().adapt(KnativeClient.class);
         io.fabric8.knative.serving.v1.Service kService = knativeClient.services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("knative/quarkus-greeting.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("knative/quarkus-greeting.yaml")).item();
 
         // ItemWritableOperation#create is deprecated. However, we can't use the new method while Quarkus LTS is not greater than 2.16.
         knativeClient.services().inNamespace(namespace).create(kService);
diff --git a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/OpenShiftServiceDiscoveryTest.java b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/OpenShiftServiceDiscoveryTest.java
index ff6157d7c9..44be5e176e 100644
--- a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/OpenShiftServiceDiscoveryTest.java
+++ b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/OpenShiftServiceDiscoveryTest.java
@@ -49,7 +49,7 @@ public class OpenShiftServiceDiscoveryTest {
     @Test
     public void testNotFoundDeploymentConfig() {
         DeploymentConfig deploymentConfig = mockServer.getOpenshiftClient().deploymentConfigs().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/deployment-config.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/deployment-config.yaml")).item();
         deploymentConfig.getMetadata().setName("test");
         mockServer.getOpenshiftClient().resource(deploymentConfig).inNamespace(namespace).createOrReplace();
         assertEquals(Optional.empty(),
@@ -63,13 +63,13 @@ public class OpenShiftServiceDiscoveryTest {
         DeploymentConfig deploymentConfig = mockServer.getOpenshiftClient()
                 .deploymentConfigs()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/deployment-config.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/deployment-config.yaml")).item();
         mockServer.getOpenshiftClient().resource(deploymentConfig).inNamespace(namespace).createOrReplace();
 
         Service service = mockServer.getOpenshiftClient()
                 .services()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/deployment-config-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/deployment-config-service.yaml")).item();
         mockServer.getOpenshiftClient().resource(service).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = kubeResourceDiscovery.query(kubeURI).map(URI::toString);
@@ -83,20 +83,20 @@ public class OpenShiftServiceDiscoveryTest {
         DeploymentConfig deploymentConfig = mockServer.getOpenshiftClient()
                 .deploymentConfigs()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/deployment-config-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/deployment-config-no-service.yaml")).item();
         DeploymentConfig createdDc = mockServer.getOpenshiftClient().resource(deploymentConfig).inNamespace(namespace).createOrReplace();
 
         ReplicationController rc = mockServer.getOpenshiftClient()
                 .replicationControllers()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/replication-controller-dc-no-svc.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/replication-controller-dc-no-svc.yaml")).item();
         rc.getMetadata().getOwnerReferences().get(0).setUid(createdDc.getMetadata().getUid());
         ReplicationController createdRc = mockServer.getOpenshiftClient().resource(rc).inNamespace(namespace).createOrReplace();
 
         Pod pod = mockServer.getOpenshiftClient()
                 .pods()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/pod-deployment-config-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("deploymentConfig/pod-deployment-config-no-service.yaml")).item();
         pod.getMetadata().setName("example-dc-no-service-1-phlx4");
         pod.getMetadata().getOwnerReferences().get(0).setUid(createdRc.getMetadata().getUid());
         mockServer.getOpenshiftClient().resource(pod).inNamespace(namespace).createOrReplace();
@@ -110,7 +110,7 @@ public class OpenShiftServiceDiscoveryTest {
         Route route = mockServer.getOpenshiftClient()
                 .routes()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("route/route.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("route/route.yaml")).item();
         mockServer.getOpenshiftClient().resource(route).inNamespace(namespace).createOrReplace();
 
         assertEquals(Optional.empty(),
@@ -124,7 +124,7 @@ public class OpenShiftServiceDiscoveryTest {
         Route route = mockServer.getOpenshiftClient()
                 .routes()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("route/route.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("route/route.yaml")).item();
         mockServer.getOpenshiftClient().resource(route).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = kubeResourceDiscovery.query(kubeURI).map(URI::toString);
@@ -138,7 +138,7 @@ public class OpenShiftServiceDiscoveryTest {
         Route route = mockServer.getOpenshiftClient()
                 .routes()
                 .inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("route/route-tls.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("route/route-tls.yaml")).item();
         mockServer.getOpenshiftClient().resource(route).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = kubeResourceDiscovery.query(kubeURI).map(URI::toString);
diff --git a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/PodUtilsTest.java b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/PodUtilsTest.java
index 228df7dbcc..da53aad82c 100644
--- a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/PodUtilsTest.java
+++ b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/PodUtilsTest.java
@@ -50,7 +50,7 @@ public class PodUtilsTest {
     @Test
     public void testPodNotFound() {
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service.yaml")).item();
         pod.getMetadata().setName("test-pod");
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
         assertEquals(Optional.empty(),
@@ -62,7 +62,7 @@ public class PodUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("pods.v1/" + namespace + "/process-quarkus-example-pod-no-service");
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service.yaml")).item();
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = discovery.query(kubeURI).map(URI::toString);
@@ -74,7 +74,7 @@ public class PodUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("pods.v1/" + namespace + "/pod-no-service-custom-port?port-name=my-custom-port");
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service-custom-port-name.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service-custom-port-name.yaml")).item();
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = discovery.query(kubeURI).map(URI::toString);
@@ -86,12 +86,12 @@ public class PodUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("pods.v1/" + namespace + "/test-pod-with-service");
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service.yaml")).item();
         pod.getMetadata().setName("test-pod-with-service");
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).item();
 
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
@@ -104,17 +104,17 @@ public class PodUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("pods.v1/" + namespace + "/test-pod-with-service-custom-label?labels=label-name=test-label;other-label=other-value");
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("pod/pod-no-service.yaml")).item();
         pod.getMetadata().setName("test-pod-with-service-custom-label");
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).item();
         service.getMetadata().setName(" process-quarkus-example-pod-clusterip-svc-custom-label");
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
         Service service1 = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("service/service-clusterip.yaml")).item();
         Map<String, String> labels = service1.getMetadata().getLabels();
         labels.put("label-name", "test-label");
         service1.getMetadata().setLabels(labels);
diff --git a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/StatefulSetUtilsTest.java b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/StatefulSetUtilsTest.java
index 8edc43c794..4e5c4aa457 100644
--- a/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/StatefulSetUtilsTest.java
+++ b/quarkus/addons/fabric8-kubernetes-service-catalog/runtime/src/test/java/org/kie/kogito/addons/quarkus/fabric8/k8s/service/catalog/StatefulSetUtilsTest.java
@@ -62,7 +62,7 @@ public class StatefulSetUtilsTest {
     @Test
     public void testNotFoundStatefulSet() {
         StatefulSet statefulSet = mockServer.getClient().apps().statefulSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-no-service.yaml")).item();
         statefulSet.getMetadata().setName("test");
         mockServer.getClient().resource(statefulSet).inNamespace(namespace).createOrReplace();
         assertEquals(Optional.empty(),
@@ -74,11 +74,11 @@ public class StatefulSetUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("statefulsets.v1.apps/" + namespace + "/example-statefulset-with-service");
 
         StatefulSet statefulSet = mockServer.getClient().apps().statefulSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset.yaml")).item();
         mockServer.getClient().resource(statefulSet).inNamespace(namespace).createOrReplace();
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-service.yaml")).item();
         mockServer.getClient().resource(service).inNamespace(namespace).createOrReplace();
 
         Optional<String> url = discovery.query(kubeURI).map(URI::toString);
@@ -89,7 +89,7 @@ public class StatefulSetUtilsTest {
     public void testStatefulSetWithServiceWithCustomPortName() {
         var kubeURI = KubernetesResourceUri.parse("statefulsets.v1.apps/" + namespace + "/custom-port-statefulset?port-name=my-custom-port-stateful");
         StatefulSet statefulSet = mockServer.getClient().apps().statefulSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset.yaml")).item();
         statefulSet.getMetadata().setName("custom-port-statefulset");
         statefulSet.getSpec().getTemplate().getSpec().getContainers().get(0).getPorts()
                 .add(new ContainerPortBuilder().withName("test-port").withContainerPort(4000).build());
@@ -98,7 +98,7 @@ public class StatefulSetUtilsTest {
         mockServer.getClient().resource(statefulSet).inNamespace(namespace).createOrReplace();
 
         Service service = mockServer.getClient().services().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-service.yaml")).item();
         service.getMetadata().setName("custom-port-name-service-statefulset");
         service.getSpec().getPorts().add(new ServicePortBuilder()
                 .withName("my-custom-port-stateful")
@@ -117,11 +117,11 @@ public class StatefulSetUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("statefulsets.v1.apps/" + namespace + "/process-quarkus-example-statefulset-no-service");
 
         StatefulSet statefulSet = mockServer.getClient().apps().statefulSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-no-service.yaml")).item();
         StatefulSet createdDeployment = mockServer.getClient().resource(statefulSet).inNamespace(namespace).createOrReplace();
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-pod-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-pod-no-service.yaml")).item();
         pod.getMetadata().setName("pod-deployment-no-service");
         pod.getMetadata().getOwnerReferences().get(0).setUid(createdDeployment.getMetadata().getUid());
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
@@ -135,13 +135,13 @@ public class StatefulSetUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("statefulsets.v1.apps/" + namespace + "/example-statefulset-no-service-2-replicas");
 
         StatefulSet statefulSet = mockServer.getClient().apps().statefulSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-no-service.yaml")).item();
         statefulSet.getMetadata().setName("example-statefulset-no-service-2-replicas");
         statefulSet.getStatus().setReplicas(2);
         StatefulSet createdstatefulSet = mockServer.getClient().resource(statefulSet).inNamespace(namespace).createOrReplace();
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-pod-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-pod-no-service.yaml")).item();
         pod.getMetadata().setName("pod-2-replicas");
         pod.getMetadata().getOwnerReferences().get(0).setUid(createdstatefulSet.getMetadata().getUid());
         mockServer.getClient().resource(pod).inNamespace(namespace).createOrReplace();
@@ -155,14 +155,14 @@ public class StatefulSetUtilsTest {
         var kubeURI = KubernetesResourceUri.parse("statefulsets.v1.apps/" + namespace + "/custom-port-statefulset-1?port-name=my-custom-port");
 
         StatefulSet statefulSet = mockServer.getClient().apps().statefulSets().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-no-service.yaml")).item();
         statefulSet.getMetadata().setName("custom-port-statefulset-1");
         statefulSet.getSpec().getTemplate().getSpec().getContainers().get(0).getPorts()
                 .add(new ContainerPortBuilder().withName("test-port").withContainerPort(4000).build());
         StatefulSet createdStatefulSet = mockServer.getClient().resource(statefulSet).inNamespace(namespace).createOrReplace();
 
         Pod pod = mockServer.getClient().pods().inNamespace(namespace)
-                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-pod-no-service.yaml")).get();
+                .load(this.getClass().getClassLoader().getResourceAsStream("statefulset/statefulset-pod-no-service.yaml")).item();
         pod.getMetadata().getOwnerReferences().get(0).setUid(createdStatefulSet.getMetadata().getUid());
         pod.getSpec().getContainers().get(0).getPorts()
                 .add(new ContainerPortBuilder()
diff --git a/quarkus/addons/fabric8-kubernetes-service-catalog/test-utils/src/main/java/org/kie/kogito/addons/quarkus/k8s/test/utils/KnativeResourceDiscoveryTestUtil.java b/quarkus/addons/fabric8-kubernetes-service-catalog/test-utils/src/main/java/org/kie/kogito/addons/quarkus/k8s/test/utils/KnativeResourceDiscoveryTestUtil.java
index c156609e02..4b33ba5402 100644
--- a/quarkus/addons/fabric8-kubernetes-service-catalog/test-utils/src/main/java/org/kie/kogito/addons/quarkus/k8s/test/utils/KnativeResourceDiscoveryTestUtil.java
+++ b/quarkus/addons/fabric8-kubernetes-service-catalog/test-utils/src/main/java/org/kie/kogito/addons/quarkus/k8s/test/utils/KnativeResourceDiscoveryTestUtil.java
@@ -38,7 +38,7 @@ public final class KnativeResourceDiscoveryTestUtil {
             Service service = knativeClient.services()
                     .inNamespace(namespace)
                     .load(getResourceAsStream(knativeYaml))
-                    .get();
+                    .item();
 
             if (remoteServiceUrl != null) {
                 service.getStatus().setUrl(remoteServiceUrl);
