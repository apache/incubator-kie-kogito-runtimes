@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    tools {
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk11'
    }
    options {
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
    }
    environment {
        // Some generated env is also defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        SONARCLOUD_TOKEN = credentials('SONARCLOUD_TOKEN')
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout(githubscm.resolveRepository('kogito-runtimes', params.GIT_AUTHOR, params.BUILD_BRANCH_NAME, false))
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    getMavenCommand()
                        .withProfiles(['run-code-coverage'])
                        .run('clean install')
                }
            }
        }
        stage('Analyze') {
            steps {
                script {
                    getMavenCommand()
                        .withOptions(['-e', '-nsu'])
                        .withProfiles(['sonarcloud-analysis'])
                        .run('validate')
                }
            }
        }
    }
    post {
        always {
            script {
                junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: true
                util.archiveConsoleLog()
            }
        }
        unsuccessful {
            script {
                mailer.sendZulipTestSummaryNotification('SonarCloud', "[${params.BUILD_BRANCH_NAME}] Kogito Runtimes", [env.KOGITO_CI_EMAIL_TO])
            }
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

MavenCommand getMavenCommand() {
    return new MavenCommand(this, ['-fae'])
                .withSettingsXmlId('kogito_release_settings')
}
