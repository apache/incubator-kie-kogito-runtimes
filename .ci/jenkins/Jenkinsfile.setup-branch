import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

droolsRepo = 'incubator-kie-drools'
dataIndexEphemeralImageName = 'quay.io/kiegroup/kogito-data-index-ephemeral'

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }

    options {
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs(disableDeferredWipeout: true)

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    checkoutRepo(droolsRepo, getDroolsTargetBranch())
                    checkoutRepo(getRepoName(), getBuildBranch())
                }
            }
        }
        stage('Build Drools') {
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        getMavenCommand(droolsRepo)
                            .withProperty('quickly')
                            .withOptions(env.BUILD_MVN_OPTS_UPSTREAM ? [ env.BUILD_MVN_OPTS_UPSTREAM ] : [])
                            .withOptions(env.DROOLS_BUILD_MVN_OPTS_UPSTREAM ? [ env.DROOLS_BUILD_MVN_OPTS_UPSTREAM ] : [])
                            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                            .run('clean install')
                    }
                }
            }
        }
        stage('Update project version') {
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        maven.mvnVersionsSet(
                            getMavenCommand(getRepoName())
                                .withProperty('full')
                                .withSettingsXmlFile(MAVEN_SETTINGS_FILE),
                            getKogitoVersion(),
                            true
                        )
                        maven.mvnSetVersionProperty(
                            getMavenCommand(getRepoName()).withSettingsXmlFile(MAVEN_SETTINGS_FILE),
                            'version.org.kie',
                            getDroolsVersion()
                        )

                        // Need artifacts available locally
                        getMavenCommand(getRepoName())
                            .withProperty('quickly')
                            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                            .run('clean install')
                        maven.mvnSetVersionProperty(
                            getMavenCommand(getRepoName())
                                .withOptions(['-pl :kogito-quarkus-workflow-common-deployment'])
                                .withSettingsXmlFile(MAVEN_SETTINGS_FILE),
                            'data-index-ephemeral.image',
                            getDataIndexEphemeralImage()
                        )
                    }
                }
            }
        }
        stage('Update branch') {
            steps {
                script {
                    dir(getRepoName()) {
                        if (githubscm.isThereAnyChanges()) {
                            def commitMsg = "Update version to Kogito ${getKogitoVersion()} / Drools ${getDroolsVersion()}"
                            githubscm.setUserConfigFromCreds(getGitAuthorPushCredsId())
                            githubscm.commitChanges(commitMsg, { githubscm.findAndStageNotIgnoredFiles('pom.xml') })
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorPushCredsId())
                        } else {
                            println '[WARN] no changes to commit'
                        }
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode()
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Setup branch', "[${getBuildBranch()}] Kogito Runtimes", [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

void checkoutRepo(String repository, String branch) {
    dir(repository) {
        deleteDir()
        checkout(githubscm.resolveRepository(repository, getGitAuthor(), branch, false, getGitAuthorCredsId()))
        // need to manually checkout branch since on a detached branch after checkout command
        sh "git checkout ${branch}"
    }
}

String getDroolsTargetBranch() {
    String targetBranch = getBuildBranch()
    List versionSplit = targetBranch.split("\\.") as List

    if (versionSplit[0].isNumber()) {
        targetBranch = "${Integer.parseInt(versionSplit[0]) + 7}.${versionSplit.tail().join('.')}"
    } else {
        echo "Cannot parse targetBranch as release branch so going further with current value: ${targetBranch}"
    }
    return targetBranch
}

String getRepoName() {
    return env.REPO_NAME
}

String getGitAuthor() {
    // GIT_AUTHOR can be env or param
    return "${GIT_AUTHOR}"
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getDroolsVersion() {
    return params.DROOLS_VERSION
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorPushCredsId() {
    return env.GIT_AUTHOR_PUSH_CREDS_ID
}

MavenCommand getMavenCommand(String directory) {
    return new MavenCommand(this, ['-fae', '-ntp'])
                .withOptions(env.BUILD_MVN_OPTS ? [ env.BUILD_MVN_OPTS ] : [])
                .inDirectory(directory)
}

String getMajorMinorKogitoVersion() {
    def parsed = getKogitoVersion().split('\\.')
    return parsed[0] + '.' + parsed[1]
}

boolean isMainBranch() {
    return env.IS_MAIN_BRANCH?.toBoolean()
}

String getWorkflowCommonDeploymentRelativePath() {
    return 'quarkus/extensions/kogito-quarkus-workflow-extension-common/kogito-quarkus-workflow-common-deployment'
}

String getDataIndexEphemeralImage() {
    if (isMainBranch()) {
        return "${dataIndexEphemeralImageName}-nightly:latest"
    }
    String version = getKogitoVersion()
    if (version.endsWith('-SNAPSHOT')) {
        return "${dataIndexEphemeralImageName}-nightly:${util.getMajorMinorVersion(version)}"
    }
    return "${dataIndexEphemeralImageName}:${util.getMajorMinorVersion(version)}"
}
