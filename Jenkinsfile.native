@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    triggers {
        cron ('H 6 * * *')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 360, unit: 'MINUTES')
    }
    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    checkoutRepo('kogito-runtimes')
                    checkoutOptaplannerRepo()
                    checkoutRepo('kogito-apps')
                    checkoutRepo('kogito-examples')
                }
            }
        }
        stage('Build kogito-runtimes') {
            steps {
                script {
                    getNativeMavenCommand('kogito-runtimes')
                        .run('clean install')
                }
            }
        }
        stage('Build optaplanner') {
            steps {
                script {
                    getNativeMavenCommand('optaplanner')
                        .run('clean install')
                }
            }
        }
        stage('Build kogito-apps') {
            steps {
                script {
                    getMavenCommand('kogito-apps')
                        .run('clean install')
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                script {
                    getNativeMavenCommand('kogito-examples')
                        .run('clean install')
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        always {
            junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
            cleanWs()
        }
    }
}

void sendNotification(){
    emailext body: "Kogito daily native #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}",
             subject: "[${env.BRANCH_NAME}][d] Runtimes native",
             to: env.KOGITO_CI_EMAIL_TO
}

void checkoutRepo(String repoName, String dirName=repoName) {
    dir(dirName) {
        checkout(githubscm.resolveRepository(repoName, 'kiegroup', env.BRANCH_NAME, false))
    }
}

void checkoutOptaplannerRepo() {
    String targetBranch = env.BRANCH_NAME
    String [] versionSplit = targetBranch.split("\\.")
    if(versionSplit.length == 3 
        && versionSplit[0].isNumber()
        && versionSplit[1].isNumber()
       && versionSplit[2] == 'x') {
        targetBranch = "${Integer.parseInt(versionSplit[0]) + 7}.${versionSplit[1]}.x"
    } else {
        echo "Cannot parse branch as release branch so going further with current value: ${targetBranch}"
    }
    dir('optaplanner') {
        checkout(githubscm.resolveRepository('optaplanner', 'kiegroup', targetBranch, false))
    }
}

MavenCommand getMavenCommand(String directory){
    return new MavenCommand(this, ['-fae'])
                .withSettingsXmlId('kogito_release_settings')
                .inDirectory(directory)
}

MavenCommand getNativeMavenCommand(String directory){
    return getMavenCommand(directory)
                .withProfiles(['native'])
                .withProperty('quarkus.native.container-build', true)
                .withProperty('quarkus.native.container-runtime', 'docker')
}
